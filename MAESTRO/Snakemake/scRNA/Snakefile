"""
A single cell RNA-seq analysis pipeline.
"""

configfile: "config.yaml"

import yaml
import sys
import os

from MAESTRO.scRNA_utility import get_fastqlist, getfastq_10x, getfastq_dropseq, SCRIPT_PATH, RSCRIPT_PATH


rule all:
    input:
        summaryreport = "Result/" + config["outprefix"] + "_scRNA_report.html"


if config["platform"] == "10x-genomics" or config["platform"] == "Dropseq":
    if config["platform"] == "10x-genomics":
        rule scrna_map:
            input:
                mapindex = config["genome"]["mapindex"],
                whitelist = config["barcode"]["whitelist"],
                fastqs = config["fastqdir"],
            output:
                bam = "Result/STAR/%sAligned.sortedByCoord.out.bam" %(config["outprefix"]),
                bai = "Result/STAR/%sAligned.sortedByCoord.out.bam.bai" %(config["outprefix"]),
                rawmtx = "Result/STAR/%sSolo.out/Gene/raw/matrix.mtx" %(config["outprefix"]),
                feature = "Result/STAR/%sSolo.out/Gene/raw/features.tsv" %(config["outprefix"]),
                barcode = "Result/STAR/%sSolo.out/Gene/raw/barcodes.tsv" %(config["outprefix"]),
            params:
                outdir = "Result/STAR/" + config["outprefix"],
                transcript = getfastq_10x(config["fastqdir"], config["fastqprefix"])["transcript"],
                barcode = getfastq_10x(config["fastqdir"], config["fastqprefix"])["barcode"],
                decompress = getfastq_10x(config["fastqdir"], config["fastqprefix"])["decompress"],
                barcodestart = config["barcode"]["barcodestart"],
                barcodelength = config["barcode"]["barcodelength"],
                umistart = config["barcode"]["umistart"],
                umilength = config["barcode"]["umilength"],            
            log:
                "Result/Log/%s_STAR.log" %(config["outprefix"])
            benchmark:
                "Result/Benchmark/%s_STAR.benchmark" %(config["outprefix"])
            threads:
                config["cores"]
            shell:
                "STAR --runMode alignReads --genomeDir {input.mapindex} --runThreadN {threads} "
                "--outFileNamePrefix {params.outdir} --outSAMtype BAM SortedByCoordinate "
                "--soloType CB_UMI_Simple --soloCBwhitelist {input.whitelist} "
                "--soloCBstart {params.barcodestart} --soloCBlen {params.barcodelength} "
                "--soloUMIstart {params.umistart} --soloUMIlen {params.umilength} "
                "--soloCBmatchWLtype 1MM_multi_pseudocounts --soloUMIfiltering MultiGeneUMI "
                "--readFilesIn {params.transcript} {params.barcode} --readFilesCommand {params.decompress} "
                "> {log};"
                "samtools index -b -@ {threads} {output.bam}"
    else:
        rule scrna_map:
            input:
                mapindex = config["genome"]["mapindex"],
                whitelist = config["barcode"]["whitelist"],
                fastqs = config["fastqdir"],
            output:
                bam = "Result/STAR/%sAligned.sortedByCoord.out.bam" %(config["outprefix"]),
                bai = "Result/STAR/%sAligned.sortedByCoord.out.bam.bai" %(config["outprefix"]),
                rawmtx = "Result/STAR/%sSolo.out/Gene/raw/matrix.mtx" %(config["outprefix"]),
                feature = "Result/STAR/%sSolo.out/Gene/raw/features.tsv" %(config["outprefix"]),
                barcode = "Result/STAR/%sSolo.out/Gene/raw/barcodes.tsv" %(config["outprefix"]),
            params:
                outdir = "Result/STAR/" + config["outprefix"],
                transcript = getfastq_dropseq(config["fastqdir"], config["fastq"]["barcode"], config["fastq"]["transcript"])["transcript"],
                barcode = getfastq_dropseq(config["fastqdir"], config["fastq"]["barcode"], config["fastq"]["transcript"])["barcode"],
                decompress = getfastq_dropseq(config["fastqdir"], config["fastq"]["barcode"], config["fastq"]["transcript"])["decompress"],
                barcodestart = config["barcode"]["barcodestart"],
                barcodelength = config["barcode"]["barcodelength"],
                umistart = config["barcode"]["umistart"],
                umilength = config["barcode"]["umilength"],            
            log:
                "Result/Log/%s_STAR.log" %(config["outprefix"])
            threads:
                config["cores"]
            benchmark:
                "Result/Benchmark/%s_STAR.benchmark" %(config["outprefix"])
            shell:
                "STAR --runMode alignReads --genomeDir {input.mapindex} --runThreadN {threads} "
                "--outFileNamePrefix {params.outdir} --outSAMtype BAM SortedByCoordinate "
                "--soloType CB_UMI_Simple --soloCBwhitelist {input.whitelist} "
                "--soloCBstart {params.barcodestart} --soloCBlen {params.barcodelength} "
                "--soloUMIstart {params.umistart} --soloUMIlen {params.umilength} "
                "--soloCBmatchWLtype 1MM_multi_pseudocounts --soloUMIfiltering MultiGeneUMI "
                "--readFilesIn {params.transcript} {params.barcode} --readFilesCommand {params.decompress} "
                "> {log};"
                "samtools index -b -@ {threads} {output.bam}"

    rule scrna_qc:
        input:
            rawmtx = "Result/STAR/%sSolo.out/Gene/raw/matrix.mtx" %(config["outprefix"]),
            feature = "Result/STAR/%sSolo.out/Gene/raw/features.tsv" %(config["outprefix"]),
            barcode = "Result/STAR/%sSolo.out/Gene/raw/barcodes.tsv" %(config["outprefix"]),
        output:
            countgene = "Result/QC/%s_count_gene_stat.txt" %(config["outprefix"]),
            filtermatrix = "Result/QC/%s_filtered_gene_count.h5" %(config["outprefix"]),
            rnafilterplot = "Result/QC/%s_scRNA_cell_filtering.png" %(config["outprefix"]),
        params:
            count = config["cutoff"]["count"],
            gene = config["cutoff"]["gene"],
            outpre = config["outprefix"],
            outdir = "Result/QC",
            species = config["species"]
        benchmark:
            "Result/Benchmark/%s_QC.benchmark" %(config["outprefix"])
        shell:
            "MAESTRO scrna-qc --format mtx --matrix {input.rawmtx} --feature {input.feature} --barcode {input.barcode} --species {params.species} "
            "--count-cutoff {params.count} --gene-cutoff {params.gene} --directory {params.outdir} --outprefix {params.outpre}"

if config["platform"] == "Smartseq2":
    rule scrna_map:
        input:
            mapindex = config["genome"]["mapindex"],
            fastq1 = os.path.join(config["fastqdir"], "{fastqid}_1.fastq"),
            fastq2 = os.path.join(config["fastqdir"], "{fastqid}_2.fastq")
        output:
            genomebam = "Result/STAR/{fastqid}Aligned.sortedByCoord.out.bam",
            transbam = "Result/STAR/{fastqid}Aligned.toTranscriptome.out.bam"
        params:
            outdir = "Result/STAR/{fastqid}"
        log:
            "Result/Log/{fastqid}_STAR_map.log"
        threads:
            config["cores"]
        shell:
            "STAR --genomeDir {input.mapindex} --runThreadN {threads} "
            "--outFilterMultimapNmax 500 --outFilterMismatchNmax 3 --quantMode TranscriptomeSAM "
            "--outFileNamePrefix {params.outdir} --outSAMtype BAM SortedByCoordinate "
            "--readFilesIn {input.fastq1} {input.fastq2} "
            ">> {log}"

    # rule bam_psort:
    #     input:
    #         bam = "Result/Mapping/{fastqid}Aligned.sortedByCoord.out.bam"
    #     output:
    #         bam = "Result/Mapping/{fastqid}Aligned.sortedByPos.out.bam"
    #     threads:
    #         config["cores"]
    #     shell:
    #         "samtools sort {input.bam} -o {output.bam} --threads {threads}"

    rule scrna_rsem_expre:
        input:
            transbam = "Result/STAR/{fastqid}Aligned.toTranscriptome.out.bam"
        output:
            generesult = "Result/STAR/{fastqid}.genes.results"
        params:
            reference = config["genome"]["rsem"],
            sample = "Result/STAR/{fastqid}"
        log:
            "Result/Log/{fastqid}_RSEM_map.log"
        threads:
            config["cores"]
        shell:
            "rsem-calculate-expression -p {threads} --paired-end --bam "
            "--estimate-rspd --append-names {input.transbam} "
            "{params.reference} {params.sample} "
            ">> {log}"

    rule scrna_rsem_count:
        input:
            generesult = expand("Result/STAR/{fastqid}.genes.results", fastqid = get_fastqlist(config["fastqdir"]))
        output:
            expression = "Result/Count/%s_gene_count_matrix.txt" %(config["outprefix"])
        shell:
            "rsem-generate-data-matrix {input.generesult} > {output.expression}"

    # rule scrna_assambly:
    #     input:
    #         genome = config["genome"]["gtf"],
    #         bam = "Result/Mapping/{fastqid}Aligned.sortedByCoord.out.bam"
    #     output:
    #         gtf = "Result/Count/{fastqid}/{fastqid}.gtf"
    #     log:
    #         "Result/Log/{fastqid}_StringTie_assembly.log"
    #     shell:
    #         "stringtie {input.bam} -e -B -p 8 "
    #         "-G {input.genome} -o {output.gtf} "
    #         ">> {log}"

    # rule scrna_gtf2matrix:
    #     input:
    #         gtfdir = expand("Result/Count/{fastqid}/{fastqid}.gtf", fastqid = get_fastqlist(config["fastqdir"]))
    #     params:
    #         gtfdir = "Result/Count/"
    #     output:
    #         gene = "Result/Count/" + config["outprefix"] + "_gene_count_matrix.csv",
    #         transcript = "Result/Count/" + config["outprefix"] + "_transcript_count_matrix.csv"
    #     shell:
    #         "prepDE.py -i {params.gtfdir} -g {output.gene} -t {output.transcript}"

    rule scrna_qc:
        input:
            expression = "Result/Count/%s_gene_count_matrix.txt" %(config["outprefix"]),
        output:
            countgene = "Result/QC/%s_count_gene_stat.txt" %(config["outprefix"]),
            filtermatrix = "Result/QC/%s_filtered_gene_count.h5" %(config["outprefix"]),
            rnafilterplot = "Result/QC/%s_scRNA_cell_filtering.png" %(config["outprefix"]),
        params:
            count = config["cutoff"]["count"],
            gene = config["cutoff"]["gene"],
            outpre = config["outprefix"],
            outdir = "Result/QC",
            species = config["species"]
        benchmark:
            "Result/Benchmark/%s_QC.benchmark" %(config["outprefix"])
        shell:
            "MAESTRO scrna-qc --format plain --matrix {input.expression} --species {params.species} "
            "--count-cutoff {params.count} --gene-cutoff {params.gene} --directory {params.outdir} --outprefix {params.outpre}"

    # rule bam_rsort:
    #     input:
    #         bam = "Result/Mapping/{fastqid}Aligned.sortedByCoord.out.bam"
    #     output:
    #         bam = "Result/Mapping/{fastqid}Aligned.sortedByReads.out.bam"
    #     threads:
    #         config["cores"]
    #     shell:
    #         "samtools sort -n {input.bam} -o {output.bam} --threads {threads}"

    rule scrna_bammerge:
        input:
            genomebam = expand("Result/STAR/{fastqid}Aligned.sortedByCoord.out.bam", fastqid = get_fastqlist(config["fastqdir"]))
        output:
            bam = "Result/STAR/%sAligned.sortedByCoord.out.bam" %(config["outprefix"]),
            bai = "Result/STAR/%sAligned.sortedByCoord.out.bam.bai" %(config["outprefix"]),
            bamlist = "Result/STAR/%s_bamlist.txt" %(config["outprefix"]),
        params:
            bamprefix = "Result/STAR/%s_bamlist_" %(config["outprefix"]),
            subprefix = "Result/STAR/%s" %(config["outprefix"])
        benchmark:
            "Result/Benchmark/%s_BamMerge.benchmark" %(config["outprefix"])
        threads:
            config["cores"]
        shell:
            "ls Result/STAR/*Aligned.sortedByCoord.out.bam > {output.bamlist};"
            "split -1000 -d {output.bamlist} {params.bamprefix};"
            "for file in $(ls {params.bamprefix}*); do sub=${{file#{params.bamprefix}}};"
            "samtools merge --threads {threads} {params.subprefix}.${{sub}}.Aligned.sortedByCoord.out.bam -b ${{file}}; done;"
            "samtools merge --threads {threads} {output.bam} {params.subprefix}.*.Aligned.sortedByCoord.out.bam;"
            "rm {params.subprefix}.[0-9]*.Aligned.sortedByCoord.out.bam;"
            "samtools index -b -@ {threads} {output.bam}"
   
    # rule scrna_rseqc:
    #     input:
    #         bam = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.bam",
    #         bai = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.bam.bai",
    #         genome = SCRIPT_PATH + "/annotations/" + config["species"] + "_RefSeq.bed",
    #         hkgene = SCRIPT_PATH + "/annotations/" + config["species"] + "_HouseKeepingGenes.bed",
    #         countgene = "Result/QC/" + config["outprefix"] + "_count_gene_stat.txt"
    #     output:
    #         stat = "Result/QC/" + config["outprefix"] + "_bam_stat.txt",
    #         distr = "Result/QC/" + config["outprefix"] + "_read_distribution.txt",
    #         genecov = "Result/QC/" + config["outprefix"] + ".geneBodyCoverage.txt",
    #         genecovplot = "Result/QC/" + config["outprefix"] + "_scRNA_genebody_cov.png",
    #         rnafilterplot = "Result/QC/" + config["outprefix"] + "_scRNA_cell_filtering.png",
    #     params:
    #         # dup = "Result/QC/" + config["outprefix"] + "_dup",
    #         # qual = "Result/QC/" + config["outprefix"] + "_qual",
    #         outdirpre = "Result/QC/" + config["outprefix"],
    #         outpre = config["outprefix"],
    #         outdir = "Result/QC",
    #         stat = config["outprefix"] + "_bam_stat.txt",
    #         distr = config["outprefix"] + "_read_distribution.txt",
    #         genecov = config["outprefix"] + ".geneBodyCoverage.txt",
    #         countgene = config["outprefix"] + "_count_gene_stat.txt"
    #     shell:
    #         "bam_stat.py -i {input.bam} > {output.stat};"
    #         # "read_duplication.py -i {input.bam} -o {params.dup};"
    #         # "read_quality.py -i {input.bam} -o {params.qual};"
    #         "read_distribution.py -i {input.bam} -r {input.genome} > {output.distr};"
    #         "geneBody_coverage.py -r {input.hkgene} -i {input.bam} -o {params.outdirpre};"
    #         "Rscript " + RSCRIPT_PATH + "/scRNAseq_qc.R {params.genecov} {params.countgene} {params.outpre} {params.outdir}"

if config["rseqc"]:
    rule scrna_samplebam:
        input:
            bam = "Result/STAR/%sAligned.sortedByCoord.out.bam" %(config["outprefix"]),
        output:
            bamsample = "Result/STAR/%sAligned.sortedByCoord.out.sample.bam" %(config["outprefix"]),
            baisample = "Result/STAR/%sAligned.sortedByCoord.out.sample.bam.bai" %(config["outprefix"]),
        benchmark:
            "Result/Benchmark/%s_BamSample.benchmark" %(config["outprefix"])
        threads:
            config["cores"]
        shell:
            "samtools view -@ {threads} -s 0.01 -b -o {output.bamsample} {input.bam};"
            "samtools index -@ {threads} {output.bamsample}"

    rule scrna_rseqc_readqual:
        input:
            bamsample = "Result/STAR/%sAligned.sortedByCoord.out.sample.bam" %(config["outprefix"]),
        output:
            qual = "Result/QC/%s.qual.r" %(config["outprefix"])
        params:
            outdirpre = "Result/QC/%s" %(config["outprefix"])
        benchmark:
            "Result/Benchmark/%s_RseqcReadqual.benchmark" %(config["outprefix"])
        shell:
            "read_quality.py -i {input.bamsample} -o {params.outdirpre}"

    rule scrna_rseqc_nvc:
        input:
            bamsample = "Result/STAR/%sAligned.sortedByCoord.out.sample.bam" %(config["outprefix"]),
        output:
            nvc = "Result/QC/%s.NVC.xls" %(config["outprefix"])
        params:
            outdirpre = "Result/QC/%s" %(config["outprefix"])
        benchmark:
            "Result/Benchmark/%s_RseqcNVC.benchmark" %(config["outprefix"])
        shell:
            "read_NVC.py -i {input.bamsample} -o {params.outdirpre}"

    rule scrna_rseqc_gc:
        input:
            bamsample = "Result/STAR/%sAligned.sortedByCoord.out.sample.bam" %(config["outprefix"]),
            baisample = "Result/STAR/%sAligned.sortedByCoord.out.sample.bam.bai" %(config["outprefix"]),
        output:
            gc = "Result/QC/%s.GC.xls" %(config["outprefix"])
        params:
            outdirpre = "Result/QC/%s" %(config["outprefix"])
        benchmark:
            "Result/Benchmark/%s_RseqcGC.benchmark" %(config["outprefix"])
        shell:
            "read_GC.py -i {input.bamsample} -o {params.outdirpre}"

    rule scrna_rseqc_bamstat:
        input:
            bam = "Result/STAR/%sAligned.sortedByCoord.out.bam" %(config["outprefix"]),
            bai = "Result/STAR/%sAligned.sortedByCoord.out.bam.bai" %(config["outprefix"]),
        output:
            stat = "Result/QC/%s_bam_stat.txt" %(config["outprefix"])
        benchmark:
            "Result/Benchmark/%s_RseqcBamstat.benchmark" %(config["outprefix"])
        shell:
            "bam_stat.py -i {input.bam} > {output.stat};"

    rule scrna_rseqc_distr:
        input:
            bam = "Result/STAR/%sAligned.sortedByCoord.out.bam" %(config["outprefix"]),
            bai = "Result/STAR/%sAligned.sortedByCoord.out.bam.bai" %(config["outprefix"]),
            genome = "%s/annotations/%s_RefSeq.bed" %(SCRIPT_PATH, config["species"]),
        output:
            distr = "Result/QC/%s_read_distribution.txt" %(config["outprefix"])
        benchmark:
            "Result/Benchmark/%s_RseqcDistr.benchmark" %(config["outprefix"])
        shell:
            "read_distribution.py -i {input.bam} -r {input.genome} > {output.distr}"

    rule scrna_rseqc_genecov:
        input:
            bamsample = "Result/STAR/%sAligned.sortedByCoord.out.sample.bam" %(config["outprefix"]),
            hkgene = "%s/annotations/%s_HouseKeepingGenes.bed" %(SCRIPT_PATH, config["species"]),
        output:
            genecov = "Result/QC/%s.geneBodyCoverage.txt" %(config["outprefix"]),
        params:
            outdirpre = "Result/QC/%s" %(config["outprefix"])
        benchmark:
            "Result/Benchmark/%s_RseqcGenecov.benchmark" %(config["outprefix"])
        shell:
            "geneBody_coverage.py -r {input.hkgene} -i {input.bamsample} -o {params.outdirpre}"

    rule scrna_rseqc_plot:
        input:
            stat = "Result/QC/%s_bam_stat.txt" %(config["outprefix"]),
            distr = "Result/QC/%s_read_distribution.txt" %(config["outprefix"]),
            qual = "Result/QC/%s.qual.r" %(config["outprefix"]),
            nvc = "Result/QC/%s.NVC.xls" %(config["outprefix"]),
            gc = "Result/QC/%s.GC.xls" %(config["outprefix"]),
            genecov = "Result/QC/%s.geneBodyCoverage.txt" %(config["outprefix"]),
            # countgene = "Result/QC/%s_count_gene_stat.txt" %(config["outprefix"]),
        output:
            readdistrplot = "Result/QC/%s_scRNA_read_distr.png" %(config["outprefix"]),
            qualplot = "Result/QC/%s_scRNA_read_quality.png" %(config["outprefix"]),
            nvcplot = "Result/QC/%s_scRNA_NVC.png" %(config["outprefix"]),
            gcplot = "Result/QC/%s_scRNA_GCcontent.png" %(config["outprefix"]),
            genecovplot = "Result/QC/%s_scRNA_genebody_cov.png" %(config["outprefix"]),
        params:
            outpre = config["outprefix"],
            outdir = "Result/QC",
            rseqc = "TRUE",
            stat = "%s_bam_stat.txt" %(config["outprefix"]),
            distr = "%s_read_distribution.txt" %(config["outprefix"]),
            qual = "%s.qual.r" %(config["outprefix"]),
            nvc = "%s.NVC.xls" %(config["outprefix"]),
            gc = "%s.GC.xls" %(config["outprefix"]),
            genecov = "%s.geneBodyCoverage.txt" %(config["outprefix"]),
            # countgene = "%s_count_gene_stat.txt" %(config["outprefix"]),
            # count = config["cutoff"]["count"],
            # gene = config["cutoff"]["gene"]
        benchmark:
            "Result/Benchmark/%s_QCPlot.benchmark" %(config["outprefix"])
        shell:
            "Rscript " + RSCRIPT_PATH + "/scRNAseq_qc.R --prefix {params.outpre} --outdir {params.outdir} "
            "--bamstat {params.stat} --readdistr {params.distr} --qual {params.qual} --nvc {params.nvc} "
            "--gc {params.gc} --genecov {params.genecov}"

# else:
#     rule scrna_rseqc_plot:
#         input:
#             countgene = "Result/QC/%s_count_gene_stat.txt" %(config["outprefix"]),
#         output:
#             rnafilterplot = "Result/QC/%s_scRNA_cell_filtering.png" %(config["outprefix"]),
#         params:
#             outpre = config["outprefix"],
#             outdir = "Result/QC",
#             rseqc = "FALSE",
#             platform = config["platform"],
#             countgene = "%s_count_gene_stat.txt" %(config["outprefix"]),
#             count = config["cutoff"]["count"],
#             gene = config["cutoff"]["gene"]
#         benchmark:
#             "Result/Benchmark/%s_QCPlot.benchmark" %(config["outprefix"])
#         shell:
#             "Rscript " + RSCRIPT_PATH + "/scRNAseq_qc.R --prefix {params.outpre} --outdir {params.outdir} --rseqc {params.rseqc} "
#             "--filtering {params.countgene} --countcutoff {params.count} --genecutoff {params.gene}"

rule scrna_analysis:
    input:
        expression = "Result/QC/%s_filtered_gene_count.h5" %(config["outprefix"]),
    output:
        specificgene = "Result/Analysis/%s_DiffGenes.tsv" %(config["outprefix"]),
        clusterplot = "Result/Analysis/%s_cluster.png" %(config["outprefix"]),
        annotateplot = "Result/Analysis/%s_annotated.png" %(config["outprefix"]),
        tflist = "Result/Analysis/%s.PredictedTFTop10.txt" %(config["outprefix"])
    params:
        expression = "../QC/%s_filtered_gene_count.h5" %(config["outprefix"]),
        species = config["species"],
        outpre = config["outprefix"],
        outdir = "Result/Analysis",
        method = "LISA",
        lisamode = config["lisamode"],
        lisaenv = config["lisaenv"],
        condadir = config["condadir"],
        signature = config["signature"]
    benchmark:
        "Result/Benchmark/%s_Analysis.benchmark" %(config["outprefix"])
    threads:
        config["cores"]
    shell:
        "Rscript " + RSCRIPT_PATH + "/scRNAseq_pipe.R --expression {params.expression} --species {params.species} "
        "--prefix {params.outpre} --method {params.method} --signature {params.signature} "
        "--lisamode {params.lisamode} --condadir {params.condadir} --lisaenv {params.lisaenv} --outdir {params.outdir} --thread {threads}"

if config["rseqc"]:
    rule scrna_report:
        input:
            clusterplot = "Result/Analysis/%s_cluster.png" %(config["outprefix"]),
            annotateplot = "Result/Analysis/%s_annotated.png" %(config["outprefix"]),
            tflist = "Result/Analysis/%s.PredictedTFTop10.txt" %(config["outprefix"]),
            readdistrplot = "Result/QC/%s_scRNA_read_distr.png" %(config["outprefix"]),
            qualplot = "Result/QC/%s_scRNA_read_quality.png" %(config["outprefix"]),
            nvcplot = "Result/QC/%s_scRNA_NVC.png" %(config["outprefix"]),
            gcplot = "Result/QC/%s_scRNA_GCcontent.png" %(config["outprefix"]),
            genecovplot = "Result/QC/%s_scRNA_genebody_cov.png" %(config["outprefix"]),
            rnafilterplot = "Result/QC/%s_scRNA_cell_filtering.png" %(config["outprefix"]),
        output:
            summaryreport = "Result/%s_scRNA_report.html" %(config["outprefix"]),
        params:
            outdir = "Result",
            outpre = config["outprefix"],
            fastqdir = config["fastqdir"],
            species = config["species"],
            platform = config["platform"],
        benchmark:
            "Result/Benchmark/%s_Report.benchmark" %(config["outprefix"])
        shell:
            "python " + SCRIPT_PATH + "/scRNA_HTMLReport.py --directory {params.outdir} --outprefix {params.outpre} "
            "--fastq-dir {params.fastqdir} --species {params.species} --platform {params.platform} --rseqc" 

else:
    rule scrna_report:
        input:
            clusterplot = "Result/Analysis/%s_cluster.png" %(config["outprefix"]),
            annotateplot = "Result/Analysis/%s_annotated.png" %(config["outprefix"]),
            tflist = "Result/Analysis/%s.PredictedTFTop10.txt" %(config["outprefix"]),
            rnafilterplot = "Result/QC/%s_scRNA_cell_filtering.png" %(config["outprefix"]),
        output:
            summaryreport = "Result/%s_scRNA_report.html" %(config["outprefix"]),
        params:
            outdir = "Result",
            outpre = config["outprefix"],
            fastqdir = config["fastqdir"],
            species = config["species"],
            platform = config["platform"],
            rseqc = False
        benchmark:
            "Result/Benchmark/%s_Report.benchmark" %(config["outprefix"])
        shell:
            "python " + SCRIPT_PATH + "/scRNA_HTMLReport.py --directory {params.outdir} --outprefix {params.outpre} "
            "--fastq-dir {params.fastqdir} --species {params.species} --platform {params.platform}" 
